package main

/*import (
	"runtime"
	"time"

	"github.com/micmonay/keybd_event"
)

func main() {
	kb, err := keybd_event.NewKeyBonding()
	if err != nil {
		panic(err)
	}

	// For linux, it is very important to wait 2 seconds
	if runtime.GOOS == "linux" {
		time.Sleep(2 * time.Second)
	}

	// Select keys to be pressed
	kb.SetKeys(keybd_event.VK_A, keybd_event.VK_B)

	// Set shift to be pressed
	kb.HasSHIFT(true)

	// Press the selected keys
	err = kb.Launching()
	if err != nil {
		panic(err)
	}

	// Or you can use Press and Release
	for {
		kb.Press()
		time.Sleep(10 * time.Millisecond)
		kb.Release()
	}
	// Here, the program will generate "ABAB" as if they were pressed on the keyboard.
}
*/

//package main

import (
	"fmt"
	"time"

	"github.com/go-vgo/robotgo"
)

func moveAndClickStepOne() {
	fmt.Println("Moving Mouse")
	robotgo.MoveMouseSmooth(166, 775, 1.0, 7.0)
	fmt.Println("Clicking")
	robotgo.Click()
}

func moveAndClickStepTwo() {
	fmt.Println("Moving Mouse")
	robotgo.MoveMouseSmooth(268, 112, 1.0, 7.0)
	fmt.Println("Clicking")
	robotgo.Click()
}

func delay() {
	fmt.Println("Delaying with 2 Seconds")
	time.Sleep(2 * time.Second)
}

func main1() {
	count := 0
	iterations := 4

	for count <= iterations {
		fmt.Println("Starting iteration")
		moveAndClickStepOne()
		delay()
		moveAndClickStepTwo()
		delay()
		fmt.Println("finising iteration")
		count++
	}
	fmt.Println("finished all iterations")
}
